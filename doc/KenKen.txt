			    Projet: KenKen
			    ==============


Fonctionnalités principales
---------------------------

Principalement, le logiciel devra avoir deux modes:

1. Résolution de grilles
2. Génération d'une grille

Les options acceptées seront les suivantes (il est possible d'en
rajouter mais ces options sont requises):

#> ./kenken -h
Usage: kenken [-a|-o FILE|-v|-V|-h] FILE...
       kenken -g[SIZE] [-u|-o FILE|-v|-V|-h]
Solve or generate kenken grids of variable size

 -g[N],--generate[=N]   generate a grid of size NxN (default:6x6)
 -a,--all               search for all possible solutions
 -u,--unique            generate a grid with unique solution
 -o FILE,--output FILE  write result to FILE
 -v,--verbose           verbose output
 -V,--version           display version and exit
 -h,--help              display this help

Le logiciel devra s'interrompre en revoyant un code EXIT_FAILURE en
cas d'erreur ou renvoyer un code EXIT_SUCCESS si tout s'est déroulé
normalement.

Notez que le mode 'verbose' devra renseigner l'utilisateur sur les
différentes étapes internes de la résolution ou de la génération des
grilles et donner quelques statistiques.


Format d'entrée
---------------

Voici un exemple de format d'entrée:

# Rooms
 1  2  2  3  4  4
 1  5  5  3  6  4
 7  7  8  8  6  4
 7  7  9 10 11 11
12 12  9 10 10 13
14 14 14 15 15 13

# Constraints
 1: 11+
 2: 2/
 3: 20x
 4: 6x
 5: 3-
 6: 3/
 7: 240x
 8: 6x
 9: 6x
10: 7+
11: 30x
12: 6x
13: 9+
14: 8+
15: 2/

Quelques règles concernant le parseur:

- Les caractères espaces, tabulation, lignes vides et tout ce qui suit
  un '#' (commentaire) doivent être ignorés.

- La grille doit être un carré de taille NxN
  (éventuellement définir une limite sur N).

- Les caractères reconnus seront: '#', '0-9', '1', ':', '+', '-', 'x', '/'.
  Tout autre caractère (en dehors d'un commentaire) devra provoquer
  une erreur.

- Les erreurs empêchant la lecture de la grille devront être dans le
  format suivant:

  kenken: error: line 1: xxxxxxxxxxx

  Puis, le logiciel se terminera en renvoyant un code EXIT_FAILURE.

- Les avertissements signaleront que le programme a pris une décision
  sur l'interprétation du fichier alors que plusieurs possibilités se
  présentaient à lui. Elles seront de la forme:

  kenken: warning: line 1: xxxxxxxxxxx

- Le parseur essayera toujours de comprendre le fichier et donnera des
  messages d'erreur le plus compréhensible possible.


Format de sortie
----------------
Le format de sortie des grilles résolues sera le suivant:

#> ./kenken ./example-grid.ken
Grid solved:
5 6 3 4 1 2
6 1 4 5 2 3
4 5 2 3 6 1
3 4 1 2 5 6
2 3 6 1 4 5
1 2 5 6 3 4

Le format de sortie des grilles générées sera le même que celui de
l'entrée (cf au-dessus).


Stadards et Coding style
------------------------
Le logiciel sera programmé en C11 avec le coding style suivant:

- Les commentaires, noms de variables, noms de fonctions seront en
  Anglais et suivront le standard suivant:

  * function_name_example()
  * variable_name_example
  * typedef_name_example_t

- Une indentation du code sera de 2 espaces de large.
- Les tabulations seront mises à 8 espaces de large.
- Les lignes ne doivent pas dépasser les 80 colonnes.
- Les commentaires seront toujours du type '/* ... */'.
- Mettre un espace autour des opérateurs binaires/ternaires, exemple:
   =  +  -  <  >  *  /  %  |  &  ^  <=  >=  ==  !=  ?  :
- Mettre un espace après les opérateurs unaires, exemple:
   &  *  +  -  ~  ! ++  --
- Pas d'espace autour des opérateurs de struct: '.' et '->'
- Mettre un espace après les mots clés:
  'if', 'switch', 'case', 'for', 'do', 'while'.
- Choisissez une manière consistante de placer les '{', '}'.
- Toutes les macros doivent être en lettres capitales:
  #define CONSTANT 0x12345
- Ajoutez de commentaires seulement lorsque c'est nécessaire:
  int i; /* This is an integer */


Tests de couverture
-------------------
Des grilles de tests avec une couverture de code d'au moins 90%
devront être fournies.


Tests de charge et profilage
----------------------------
Une analyse d'efficacité en profondeur doit être menée sur les
différentes approches que vous tenterez.


Corpus de grilles
-----------------
Un corpus de grilles, classées par niveau de difficultés, devront être
rendues à l'issue du projet. Dont au moins une dizaine de grilles
non-résolues par le logiciel (au moins une heure de calcul sans résultat).


Build-system
------------
On utilisera make pour construire le projet. Un Makefile sera à la
racine du projet et possédera les règles suivantes:

make [all]    Build all
make check    Run coverage tests
make profile  Run performance and load tests
make clean    Remove all files generated by make
make help     Display this help

La cible 'all' devra mettre le binaire 'kenken' à la racine.


Structure du projet
-------------------

kenken/
  |
  +-Makefile
  +-doc/
  +-include/
  +-src/
  +-test/
