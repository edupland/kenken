Project KenKen2 V2.0
KenKen2 is a solver/generator of KenKen grids.

COMPILATION
-----------

To compile, go to the root directory and execute "make".
This will generate an executable named "kenken" that can be used to solve
or generate KenKen grids.

USAGE
-----

Usage of the kenken executable is as follows :

Usage: kenken [-a|-o FILE|-v|-V|-h] FILE...
       kenken -g[SIZE] [-u|-o FILE|-v|-V|-h]
Solve or generate kenken grids of variable size

 -g[N],--generate[=N]   generate a grid of size NxN (default:6x6)
 -a,--all               search for all possible solutions
 -u,--unique            generate a grid with unique solution
 -o FILE,--output FILE  write result to FILE
 -v,--verbose           verbose output
 -V,--version           display version and exit
 -h,--help              display further help
 -m[N], --minimum[=N]   minimum constraints size for generation
 -M[N], --maximum[=N]   minimum constraints size for generation
 -s[S], --solver[=S]    specifies a solver to use
 -O[S], --operator[=S]  restricts the operator pool for generation

A more detailed help is given when calling kenken with -h option.

Grids given to kenken must fulfill the following format :

# Rooms
 1  2  2  3  4  4
 1  5  5  3  6  4
 7  7  8  8  6  4
 7  7  9 10 11 11
12 12  9 10 10 13
14 14 14 15 15 13

# Constraints
 1: 11+
 2: 2/
 3: 20x
 4: 6x
 5: 3-
 6: 3/
 7: 240x
 8: 6x
 9: 6x
10: 7+
11: 30x
12: 6x
13: 9+
14: 8+
15: 2/

Room 1 is composed by cells 0,0 and 1,0 and the corresponding contraint is 11+
Room 2 is composed by cells 0,1 and 0,2 and the corresponding contraint is 2/
...
Room 15 is composed by cells 5,3 and 5,4 and the corresponding contraint is 2/

All lines starting with a "#" character will be considered as commentaries.
Spaces, empty lines and tabulations are also ignored, and every invalid or
unexpected character will cause kenken to stop, with a corresponding error
message.

Example of usages of kenken :

Display help :

  ./kenken -h

Solve the grid "example-grid.ken" in the "test" directory, and display the
current version :

  ./kenken -V test/example-grid.ken

Generate a 10 sized grid and store it in the "grid.ken" file :

  ./kenken -g10 -o grid.ken

TREE
----

Tree of the root directory "kenken" :
.
|__ doc
|__ include
|   |
|   |__ generator.h
|   |__ grid.h
|   |__ kenken.h
|   |__ output.h
|   |__ parser.h
|   |__ solver.h
|   |__ z3_solver.h
|
|__ Makefile
|
|__ src
|   |__ generator
|   |   |__ board.c
|   |   |__ contraints.c
|   |   |__ generator.c
|   |   |__ Makefile
|   |   |__ rooms.c
|   |
|   |__ grid.c
|   |__ kenken.c
|   |__ Makefile
|   |__ output.c
|   |__ parser.c
|   |__ solver
|       |__ back_tracking.c
|       |__ logic.c
|       |__ Makefile
|       |__ solver.c
|       |__ z3_solver
|           |__ equations_system.c
|           |__ inequalties_system.c
|           |__ linear_inequalties_system.c
|           |__ Makefile
|           |__ z3_solver.c
|
|__ test
    |__ check

src/ :
  Contains the sources of the project.

include/ :
  Contains the .h files of the project.

test/ :
  Contains grids to call the solvers on.

test/check/ :
  Gets all files generated by the make check rule.

doc/ :
  Contains the memoire for the project KenKen2.

CHECK
-----

To run the coverage tests :
  >. make
  >. make check


PROFILE
-------

To run the profiling tests :
  >. make
  >. make profile

AUTHORS
-------

SÃ©bastien Granger
Pablo Tomas
Hugo Jalenques
Erwan Dupland
